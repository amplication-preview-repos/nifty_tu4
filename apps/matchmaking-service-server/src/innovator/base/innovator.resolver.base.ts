/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Innovator } from "./Innovator";
import { InnovatorCountArgs } from "./InnovatorCountArgs";
import { InnovatorFindManyArgs } from "./InnovatorFindManyArgs";
import { InnovatorFindUniqueArgs } from "./InnovatorFindUniqueArgs";
import { CreateInnovatorArgs } from "./CreateInnovatorArgs";
import { UpdateInnovatorArgs } from "./UpdateInnovatorArgs";
import { DeleteInnovatorArgs } from "./DeleteInnovatorArgs";
import { InnovatorService } from "../innovator.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Innovator)
export class InnovatorResolverBase {
  constructor(
    protected readonly service: InnovatorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Innovator",
    action: "read",
    possession: "any",
  })
  async _innovatorsMeta(
    @graphql.Args() args: InnovatorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Innovator])
  @nestAccessControl.UseRoles({
    resource: "Innovator",
    action: "read",
    possession: "any",
  })
  async innovators(
    @graphql.Args() args: InnovatorFindManyArgs
  ): Promise<Innovator[]> {
    return this.service.innovators(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Innovator, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Innovator",
    action: "read",
    possession: "own",
  })
  async innovator(
    @graphql.Args() args: InnovatorFindUniqueArgs
  ): Promise<Innovator | null> {
    const result = await this.service.innovator(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Innovator)
  @nestAccessControl.UseRoles({
    resource: "Innovator",
    action: "create",
    possession: "any",
  })
  async createInnovator(
    @graphql.Args() args: CreateInnovatorArgs
  ): Promise<Innovator> {
    return await this.service.createInnovator({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Innovator)
  @nestAccessControl.UseRoles({
    resource: "Innovator",
    action: "update",
    possession: "any",
  })
  async updateInnovator(
    @graphql.Args() args: UpdateInnovatorArgs
  ): Promise<Innovator | null> {
    try {
      return await this.service.updateInnovator({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Innovator)
  @nestAccessControl.UseRoles({
    resource: "Innovator",
    action: "delete",
    possession: "any",
  })
  async deleteInnovator(
    @graphql.Args() args: DeleteInnovatorArgs
  ): Promise<Innovator | null> {
    try {
      return await this.service.deleteInnovator(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
