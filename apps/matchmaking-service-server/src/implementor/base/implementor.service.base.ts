/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Implementor as PrismaImplementor } from "@prisma/client";

export class ImplementorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ImplementorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.implementor.count(args);
  }

  async implementors<T extends Prisma.ImplementorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImplementorFindManyArgs>
  ): Promise<PrismaImplementor[]> {
    return this.prisma.implementor.findMany<Prisma.ImplementorFindManyArgs>(
      args
    );
  }
  async implementor<T extends Prisma.ImplementorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImplementorFindUniqueArgs>
  ): Promise<PrismaImplementor | null> {
    return this.prisma.implementor.findUnique(args);
  }
  async createImplementor<T extends Prisma.ImplementorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImplementorCreateArgs>
  ): Promise<PrismaImplementor> {
    return this.prisma.implementor.create<T>(args);
  }
  async updateImplementor<T extends Prisma.ImplementorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImplementorUpdateArgs>
  ): Promise<PrismaImplementor> {
    return this.prisma.implementor.update<T>(args);
  }
  async deleteImplementor<T extends Prisma.ImplementorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImplementorDeleteArgs>
  ): Promise<PrismaImplementor> {
    return this.prisma.implementor.delete(args);
  }
}
