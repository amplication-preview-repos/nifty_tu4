/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Innovator as PrismaInnovator } from "@prisma/client";

export class InnovatorServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.InnovatorCountArgs, "select">
  ): Promise<number> {
    return this.prisma.innovator.count(args);
  }

  async innovators<T extends Prisma.InnovatorFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.InnovatorFindManyArgs>
  ): Promise<PrismaInnovator[]> {
    return this.prisma.innovator.findMany<Prisma.InnovatorFindManyArgs>(args);
  }
  async innovator<T extends Prisma.InnovatorFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.InnovatorFindUniqueArgs>
  ): Promise<PrismaInnovator | null> {
    return this.prisma.innovator.findUnique(args);
  }
  async createInnovator<T extends Prisma.InnovatorCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InnovatorCreateArgs>
  ): Promise<PrismaInnovator> {
    return this.prisma.innovator.create<T>(args);
  }
  async updateInnovator<T extends Prisma.InnovatorUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.InnovatorUpdateArgs>
  ): Promise<PrismaInnovator> {
    return this.prisma.innovator.update<T>(args);
  }
  async deleteInnovator<T extends Prisma.InnovatorDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.InnovatorDeleteArgs>
  ): Promise<PrismaInnovator> {
    return this.prisma.innovator.delete(args);
  }
}
