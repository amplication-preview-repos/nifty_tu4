/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Implementor } from "./Implementor";
import { ImplementorCountArgs } from "./ImplementorCountArgs";
import { ImplementorFindManyArgs } from "./ImplementorFindManyArgs";
import { ImplementorFindUniqueArgs } from "./ImplementorFindUniqueArgs";
import { CreateImplementorArgs } from "./CreateImplementorArgs";
import { UpdateImplementorArgs } from "./UpdateImplementorArgs";
import { DeleteImplementorArgs } from "./DeleteImplementorArgs";
import { ImplementorService } from "../implementor.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Implementor)
export class ImplementorResolverBase {
  constructor(
    protected readonly service: ImplementorService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Implementor",
    action: "read",
    possession: "any",
  })
  async _implementorsMeta(
    @graphql.Args() args: ImplementorCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Implementor])
  @nestAccessControl.UseRoles({
    resource: "Implementor",
    action: "read",
    possession: "any",
  })
  async implementors(
    @graphql.Args() args: ImplementorFindManyArgs
  ): Promise<Implementor[]> {
    return this.service.implementors(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Implementor, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Implementor",
    action: "read",
    possession: "own",
  })
  async implementor(
    @graphql.Args() args: ImplementorFindUniqueArgs
  ): Promise<Implementor | null> {
    const result = await this.service.implementor(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Implementor)
  @nestAccessControl.UseRoles({
    resource: "Implementor",
    action: "create",
    possession: "any",
  })
  async createImplementor(
    @graphql.Args() args: CreateImplementorArgs
  ): Promise<Implementor> {
    return await this.service.createImplementor({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Implementor)
  @nestAccessControl.UseRoles({
    resource: "Implementor",
    action: "update",
    possession: "any",
  })
  async updateImplementor(
    @graphql.Args() args: UpdateImplementorArgs
  ): Promise<Implementor | null> {
    try {
      return await this.service.updateImplementor({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Implementor)
  @nestAccessControl.UseRoles({
    resource: "Implementor",
    action: "delete",
    possession: "any",
  })
  async deleteImplementor(
    @graphql.Args() args: DeleteImplementorArgs
  ): Promise<Implementor | null> {
    try {
      return await this.service.deleteImplementor(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
